---
import { X, Menu } from "@lucide/astro";
import Button from "./ui/Button.astro";
import MenuDropdownHeader from "./MenuDropdownHeader.astro";
import { cn } from "@/lib/utils";

const navItems = [
  { name: "Nosotros", href: "/about" },
  { name: "Servicios", href: "#servicios" },
  { name: "Nuestra Flota", href: "/fleet" },
  { name: "Servicios Realizados", href: "/done-services" },
];
---

<header
  class="fixed top-0 left-0 right-0 z-50 glass-effect border-b border-border"
>
  <div class="container mx-auto px-4 lg:px-8">
    <div class="flex items-center justify-between h-16">
      {/* Logo */}
      <a href="/" class="flex items-center space-x-2">
        <div
          class="w-10 h-10 bg-primary rounded-lg flex items-center justify-center"
        >
          <!-- <Car class="w-6 h-6 text-white" /> -->
        </div>
        <span class="text-xl font-bold text-brand-dark">PeGO</span>
      </a>

      {/* Desktop Navigation */}
      <nav 
        id="desktop-nav"
      class="hidden lg:flex items-center space-x-8">
        {
          navItems.map((item) =>
            item.href.startsWith("#") ? (
              <MenuDropdownHeader item={item} />
            ) : (
              <a
                href={item.href}
                class="text-sm font-medium text-brand-gray hover:text-primary transition-brand"
              >
                {item.name}
              </a>
            )
          )
        }
      </nav>

      {/* Desktop Buttons */}
      <div class="hidden lg:flex items-center space-x-3">
        <Button variant="ghost" size="sm" class="text-brand-gray">
          Ingresar
        </Button>
        <Button size="sm"> Reservar Ahora </Button>
      </div>

      {/* Mobile Menu Button */}
      <button class="lg:hidden p-2 cursor-pointer" id="toggle-menu">
        <X id="close-menu" class="w-6 h-6 text-brand-gray hidden" />
        <Menu id="open-menu" class="w-6 h-6 text-brand-gray" />
      </button>
    </div>

    {/* Mobile Menu */}
    <div id="mobile-menu" class="inset-y-0 hidden lg:hidden py-4 border-t min-h-[calc(100vh-4rem)] max-h-[calc(100vh-4rem)] border-border overflow-x-hidden overflow-y-auto">
      <nav class="flex flex-col space-y-4 ">
        {
          navItems.map((item) =>
            item.href.startsWith("#") ? (
              <MenuDropdownHeader item={item} isMobile />
              // <></>
            ) : (
              <a
                href={item.href}
                class="text-sm font-medium text-brand-gray hover:text-primary transition-brand"
                
              >
                {item.name}
              </a>
            )
          )
        }
        <div class="flex flex-col space-y-2 pt-4">
          <Button variant="ghost" size="sm" class="justify-start">
            Ingresar
          </Button>
          <Button size="sm"> Reservar Ahora </Button>
        </div>
      </nav>
    </div>


    </div>
  </div>
</header>

<script>

 

  // Mobile menu state
  let isMenuOpen = false;

  // Toggle mobile menu
  function toggleMenu() {
    isMenuOpen = !isMenuOpen;
  }

  const menuButton = document.querySelector(
    "#toggle-menu"
  ) as HTMLButtonElement;

  const mobileMenu = document.querySelector("#mobile-menu") as HTMLElement;

  // Close mobile menu on outside click
  menuButton?.addEventListener("click", (event) => {
    toggleMenu();
    
    const openMenu = document.querySelector("#open-menu") as HTMLElement;
    const closeMenu = document.querySelector("#close-menu") as HTMLElement;

    if (isMenuOpen) {
      openMenu.classList.add("hidden");
      closeMenu.classList.remove("hidden");

      mobileMenu.classList.remove("hidden");
    } else {
      openMenu.classList.remove("hidden");
      closeMenu.classList.add("hidden");

      mobileMenu.classList.add("hidden");
    }
 });
    
    //* Change the color of the links when the url contains the href of the link
    const links = document.querySelectorAll(
      "#desktop-nav a, #mobile-menu a"
    ) as NodeListOf<HTMLAnchorElement>;
    links.forEach((link) => {
      const href = link.getAttribute("href");
      if (link.getAttribute("href") === window.location.pathname) {
        link.classList.add("text-primary");
        link.classList.remove("text-brand-gray");
      } else {
        link.classList.remove("text-primary");
        link.classList.add("text-brand-gray");
      }
    });
  
</script>

